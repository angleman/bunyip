{"name":"Bunyip","google":"UA-32365492-1","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Automate client-side unit testing in real browsers using the CLI","body":"# bunyip\r\n\r\nAutomate client-side unit testing in real browsers using the CLI\r\n\r\n<iframe width=\"660\" height=\"400\" frameborder=\"0\" src=\"http://play.codestre.am/embed/b9e2790cc31446a5a183833bc\" allowfullscreen=\"\"></iframe>\r\n\r\n## Getting Started\r\nInstall the module with: `npm install -g bunyip`. This is a CLI tool so it needs to be globally installed.\r\n\r\n### BrowserStack account\r\nIn order for bunyip to flex its real muscle I recommend you get a paid [BrowserStack account](http://www.browserstack.com/pricing) as all paid accounts have access to their API. Without the API you'll need to connect your own slave browsers to bunyip.\r\n\r\n### localhost sharing service\r\nIf you wish to test on devices that are not part of your local network you'll be required to setup a tunneling service. I recommend [pagekite](https://pagekite.net/support/quickstart/) as it gives you a nice free chunk of data and allows you to specify a reusable subdomain. [Showoff.io](https://showoff.io/) is another good option.\r\n\r\n### Setup the config.js file\r\nIf you don't wish to use BrowserStack or a localhost sharing service you can skip this step. If you look inside the lib folder you'll see a `config-template.js` file, copy it and rename to config.js. Edit the values to whatever you need it to be.\r\n\r\n```js\r\nvar config = config || {};\r\n\r\nconfig.browserstack = {\r\n\tusername: \"foo\", // Your BrowserStack username\r\n\tpassword: \"bar\", // Your BrowserStack password\r\n\tversion: 2\r\n};\r\n\r\n// The tunneling service I use is https://pagekite.net/support/quickstart/ \r\n// You can easily use another service lke showoff.io only requirement is that you can specify a fixed url name\r\nconfig.port = \" 9000 \";\r\nconfig.tunnellink = \"bunyip.pagekite.me/\"; // The subdomain that the tunnel can be access by\r\n// This is the command that nodejs will execute using child_process.exec\r\n// If you were using showoff.io the below command would be \"show\" + config.port\r\nconfig.tunnel = \"pagekite.py\" + config.port + config.tunnellink;\r\n\r\nmodule.exports = config;\r\n```\r\n\r\n_(Can this be done in an easier fashion? Do a pull request!)_\r\n\r\n## Test suite adaptors\r\n\r\nBehind the scenes bunyip uses a tool called Yeti unfortunately Yeti only works with YUI Test. However I have written some [adaptors](https://github.com/ryanseddon/yeti-adaptors) for QUnit and jasmine, go check out my other repo for examples on using them with your current test suites.\r\n\r\nIf you use another client-side testsuite please feel free to contribute it to my [yeti-adaptors](https://github.com/ryanseddon/yeti-adaptors) repo.\r\n\r\n## Examples\r\n\r\n```bash\r\nbunyip -f index.html\r\n```\r\n\r\nThe above command will launch a simple Yeti hub on port 9000 and use the `index.html` inside your current working directory.\r\n\r\n```bash\r\nbunyip -f index.html -p 1337\r\n```\r\n\r\nThis will change the port that is used. The global config value will be updated for you so don't worry.\r\n\r\n### BrowserStack workers\r\n\r\n```bash\r\nbunyip -f index.html -b ios\r\n```\r\n\r\nAssuming you have a BrowserStack paid account and have setup a localhost sharing service the `-b ios` will send off a command to launch all iOS devices (3 iPhones and 3 iPads) on BrowserStack and once they're connected you can run your test suite.\r\n\r\n```bash\r\nbunyip -s\r\n```\r\n\r\nThis will query the BrowserStack API for any device or browsers that are currently running on your account.\r\n\r\n```bash\r\nbunyip -k <id> or all\r\n```\r\n\r\nIf you no longer need a specific worker or you wish to destroy all of them you can either specify a single worker id or `all` and it will destroy said worker(s).\r\n\r\n```bash\r\nbunyip -h\r\n```\r\n\r\nFor more info specify the help flag to get more info about each command flag available.\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/cowboy/grunt).\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n\r\n## License\r\nCopyright (c) 2012 Ryan Seddon  \r\nLicensed under the MIT license.\r\n"}